{
    "acados_include_path": "/home/ideaForge/acados/include",
    "acados_lib_path": "/home/ideaForge/acados/lib",
    "code_export_directory": "/home/ideaForge/ros2_ws/src/NMPC_Controller/c_generated_code",
    "constraints": {
        "C": [],
        "C_e": [],
        "D": [],
        "constr_type": "BGH",
        "constr_type_0": "BGH",
        "constr_type_e": "BGH",
        "has_x0": true,
        "idxbu": [
            0,
            1,
            2,
            3
        ],
        "idxbx": [],
        "idxbx_0": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12
        ],
        "idxbx_e": [],
        "idxbxe_0": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12
        ],
        "idxsbu": [],
        "idxsbx": [],
        "idxsbx_e": [],
        "idxsg": [],
        "idxsg_e": [],
        "idxsh": [],
        "idxsh_0": [],
        "idxsh_e": [],
        "idxsphi": [],
        "idxsphi_0": [],
        "idxsphi_e": [],
        "lbu": [
            0,
            0,
            0,
            0
        ],
        "lbx": [],
        "lbx_0": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "lbx_e": [],
        "lg": [],
        "lg_e": [],
        "lh": [
            0.98
        ],
        "lh_0": [],
        "lh_e": [],
        "lphi": [],
        "lphi_0": [],
        "lphi_e": [],
        "lsbu": [],
        "lsbx": [],
        "lsbx_e": [],
        "lsg": [],
        "lsg_e": [],
        "lsh": [],
        "lsh_0": [],
        "lsh_e": [],
        "lsphi": [],
        "lsphi_0": [],
        "lsphi_e": [],
        "ubu": [
            1,
            1,
            1,
            1
        ],
        "ubx": [],
        "ubx_0": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "ubx_e": [],
        "ug": [],
        "ug_e": [],
        "uh": [
            1.02
        ],
        "uh_0": [],
        "uh_e": [],
        "uphi": [],
        "uphi_0": [],
        "uphi_e": [],
        "usbu": [],
        "usbx": [],
        "usbx_e": [],
        "usg": [],
        "usg_e": [],
        "ush": [],
        "ush_0": [],
        "ush_e": [],
        "usphi": [],
        "usphi_0": [],
        "usphi_e": []
    },
    "cost": {
        "Vu": [],
        "Vu_0": [],
        "Vx": [],
        "Vx_0": [],
        "Vx_e": [],
        "Vz": [],
        "Vz_0": [],
        "W": [],
        "W_0": [],
        "W_e": [],
        "Zl": [],
        "Zl_0": [],
        "Zl_e": [],
        "Zu": [],
        "Zu_0": [],
        "Zu_e": [],
        "cost_ext_fun_type": "casadi",
        "cost_ext_fun_type_0": "casadi",
        "cost_ext_fun_type_e": "casadi",
        "cost_function_ext_cost": null,
        "cost_function_ext_cost_0": null,
        "cost_function_ext_cost_e": null,
        "cost_source_ext_cost": null,
        "cost_source_ext_cost_0": null,
        "cost_source_ext_cost_e": null,
        "cost_type": "EXTERNAL",
        "cost_type_0": "EXTERNAL",
        "cost_type_e": "EXTERNAL",
        "yref": [],
        "yref_0": [],
        "yref_e": [],
        "zl": [],
        "zl_0": [],
        "zl_e": [],
        "zu": [],
        "zu_0": [],
        "zu_e": []
    },
    "cython_include_dirs": [
        "/home/ideaForge/.local/lib/python3.10/site-packages/numpy/core/include",
        "/usr/include/python3.10"
    ],
    "dims": {
        "N": 100,
        "n_global_data": 0,
        "nbu": 4,
        "nbx": 0,
        "nbx_0": 13,
        "nbx_e": 0,
        "nbxe_0": 13,
        "ng": 0,
        "ng_e": 0,
        "nh": 1,
        "nh_0": 0,
        "nh_e": 0,
        "np": 17,
        "np_global": 0,
        "nphi": 0,
        "nphi_0": 0,
        "nphi_e": 0,
        "nr": 0,
        "nr_0": 0,
        "nr_e": 0,
        "ns": 0,
        "ns_0": 0,
        "ns_e": 0,
        "nsbu": 0,
        "nsbx": 0,
        "nsbx_e": 0,
        "nsg": 0,
        "nsg_e": 0,
        "nsh": 0,
        "nsh_0": 0,
        "nsh_e": 0,
        "nsphi": 0,
        "nsphi_0": 0,
        "nsphi_e": 0,
        "nu": 4,
        "nx": 13,
        "nx_next": 13,
        "ny": 0,
        "ny_0": 0,
        "ny_e": 0,
        "nz": 0
    },
    "external_function_files_model": [
        "quad_model/quad_expl_ode_fun.c",
        "quad_model/quad_expl_vde_forw.c",
        "quad_model/quad_expl_vde_adj.c"
    ],
    "external_function_files_ocp": [
        "quad_constraints/quad_constr_h_fun_jac_uxt_zt.c",
        "quad_constraints/quad_constr_h_fun.c",
        "quad_cost/quad_cost_ext_cost_0_fun.c",
        "quad_cost/quad_cost_ext_cost_0_fun_jac_hess.c",
        "quad_cost/quad_cost_ext_cost_0_fun_jac.c",
        "quad_cost/quad_cost_ext_cost_fun.c",
        "quad_cost/quad_cost_ext_cost_fun_jac_hess.c",
        "quad_cost/quad_cost_ext_cost_fun_jac.c",
        "quad_cost/quad_cost_ext_cost_e_fun.c",
        "quad_cost/quad_cost_ext_cost_e_fun_jac_hess.c",
        "quad_cost/quad_cost_ext_cost_e_fun_jac.c"
    ],
    "json_file": "./quadhello_acados_ocp.json",
    "model": {
        "con_h_expr": "sqrt(dot(a, a))",
        "con_h_expr_0": [],
        "con_h_expr_e": [],
        "con_phi_expr": [],
        "con_phi_expr_0": [],
        "con_phi_expr_e": [],
        "con_r_expr": [],
        "con_r_expr_0": [],
        "con_r_expr_e": [],
        "con_r_in_phi": [],
        "con_r_in_phi_0": [],
        "con_r_in_phi_e": [],
        "cost_conl_custom_outer_hess": [],
        "cost_conl_custom_outer_hess_0": [],
        "cost_conl_custom_outer_hess_e": [],
        "cost_expr_ext_cost": "@1=(vertcat(a[0], (-a[1]), (-a[2]), (-a[3]))/dot(a, a)), @2=((((q_ref[0]*@1[0])-(q_ref[1]*@1[1]))-(q_ref[2]*@1[2]))-(q_ref[3]*@1[3])), @3=((((q_ref[0]*@1[3])+(q_ref[1]*@1[2]))-(q_ref[2]*@1[1]))+(q_ref[3]*@1[0])), @4=vertcat(@2, 0, 0, @3), @5=(@4/||@4||_F), @6=(vertcat(@5[0], (-@5[1]), (-@5[2]), (-@5[3]))/dot(@5, @5)), @7=((((q_ref[0]*@1[1])+(q_ref[1]*@1[0]))+(q_ref[2]*@1[3]))-(q_ref[3]*@1[2])), @8=((((q_ref[0]*@1[2])-(q_ref[1]*@1[3]))+(q_ref[2]*@1[0]))+(q_ref[3]*@1[1])), @9=vertcat(u1, u2, u3, u4), @10=(vertcat(a[0], (-a[1]), (-a[2]), (-a[3]))/dot(a, a)), @11=((((q_ref[0]*@10[0])-(q_ref[1]*@10[1]))-(q_ref[2]*@10[2]))-(q_ref[3]*@10[3])), @12=((((q_ref[0]*@10[3])+(q_ref[1]*@10[2]))-(q_ref[2]*@10[1]))+(q_ref[3]*@10[0])), @13=vertcat(@11, 0, 0, @12), @14=(@13/||@13||_F), @15=(vertcat(@14[0], (-@14[1]), (-@14[2]), (-@14[3]))/dot(@14, @14)), @16=((((q_ref[0]*@10[1])+(q_ref[1]*@10[0]))+(q_ref[2]*@10[3]))-(q_ref[3]*@10[2])), @17=((((q_ref[0]*@10[2])-(q_ref[1]*@10[3]))+(q_ref[2]*@10[0]))+(q_ref[3]*@10[1])), (mac(mac(vertcat((p-p_ref), (sq(((((@2*@6[1])+(@7*@6[0]))+(@8*@6[3]))-(@3*@6[2])))+sq(((((@2*@6[2])-(@7*@6[3]))+(@8*@6[0]))+(@3*@6[1])))), @5[3], (v-v_ref), (r-r_ref), (@9-u_ref))',\n[[8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1]],zeros(1x15)),vertcat((p-p_ref), (sq(((((@11*@15[1])+(@16*@15[0]))+(@17*@15[3]))-(@12*@15[2])))+sq(((((@11*@15[2])-(@16*@15[3]))+(@17*@15[0]))+(@12*@15[1])))), @14[3], (v-v_ref), (r-r_ref), (@9-u_ref)),0)+mac(mac(@9',\n[[0.1, 0, 0, 0], \n [0, 0.1, 0, 0], \n [0, 0, 0.1, 0], \n [0, 0, 0, 0.1]],zeros(1x4)),@9,0))",
        "cost_expr_ext_cost_0": "@1=(vertcat(a[0], (-a[1]), (-a[2]), (-a[3]))/dot(a, a)), @2=((((q_ref[0]*@1[0])-(q_ref[1]*@1[1]))-(q_ref[2]*@1[2]))-(q_ref[3]*@1[3])), @3=((((q_ref[0]*@1[3])+(q_ref[1]*@1[2]))-(q_ref[2]*@1[1]))+(q_ref[3]*@1[0])), @4=vertcat(@2, 0, 0, @3), @5=(@4/||@4||_F), @6=(vertcat(@5[0], (-@5[1]), (-@5[2]), (-@5[3]))/dot(@5, @5)), @7=((((q_ref[0]*@1[1])+(q_ref[1]*@1[0]))+(q_ref[2]*@1[3]))-(q_ref[3]*@1[2])), @8=((((q_ref[0]*@1[2])-(q_ref[1]*@1[3]))+(q_ref[2]*@1[0]))+(q_ref[3]*@1[1])), @9=vertcat(u1, u2, u3, u4), @10=(vertcat(a[0], (-a[1]), (-a[2]), (-a[3]))/dot(a, a)), @11=((((q_ref[0]*@10[0])-(q_ref[1]*@10[1]))-(q_ref[2]*@10[2]))-(q_ref[3]*@10[3])), @12=((((q_ref[0]*@10[3])+(q_ref[1]*@10[2]))-(q_ref[2]*@10[1]))+(q_ref[3]*@10[0])), @13=vertcat(@11, 0, 0, @12), @14=(@13/||@13||_F), @15=(vertcat(@14[0], (-@14[1]), (-@14[2]), (-@14[3]))/dot(@14, @14)), @16=((((q_ref[0]*@10[1])+(q_ref[1]*@10[0]))+(q_ref[2]*@10[3]))-(q_ref[3]*@10[2])), @17=((((q_ref[0]*@10[2])-(q_ref[1]*@10[3]))+(q_ref[2]*@10[0]))+(q_ref[3]*@10[1])), (mac(mac(vertcat((p-p_ref), (sq(((((@2*@6[1])+(@7*@6[0]))+(@8*@6[3]))-(@3*@6[2])))+sq(((((@2*@6[2])-(@7*@6[3]))+(@8*@6[0]))+(@3*@6[1])))), @5[3], (v-v_ref), (r-r_ref), (@9-u_ref))',\n[[8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1]],zeros(1x15)),vertcat((p-p_ref), (sq(((((@11*@15[1])+(@16*@15[0]))+(@17*@15[3]))-(@12*@15[2])))+sq(((((@11*@15[2])-(@16*@15[3]))+(@17*@15[0]))+(@12*@15[1])))), @14[3], (v-v_ref), (r-r_ref), (@9-u_ref)),0)+mac(mac(@9',\n[[0.1, 0, 0, 0], \n [0, 0.1, 0, 0], \n [0, 0, 0.1, 0], \n [0, 0, 0, 0.1]],zeros(1x4)),@9,0))",
        "cost_expr_ext_cost_custom_hess": [],
        "cost_expr_ext_cost_custom_hess_0": [],
        "cost_expr_ext_cost_custom_hess_e": [],
        "cost_expr_ext_cost_e": "@1=(vertcat(a[0], (-a[1]), (-a[2]), (-a[3]))/dot(a, a)), @2=((((q_ref[0]*@1[0])-(q_ref[1]*@1[1]))-(q_ref[2]*@1[2]))-(q_ref[3]*@1[3])), @3=((((q_ref[0]*@1[3])+(q_ref[1]*@1[2]))-(q_ref[2]*@1[1]))+(q_ref[3]*@1[0])), @4=vertcat(@2, 0, 0, @3), @5=(@4/||@4||_F), @6=(vertcat(@5[0], (-@5[1]), (-@5[2]), (-@5[3]))/dot(@5, @5)), @7=((((q_ref[0]*@1[1])+(q_ref[1]*@1[0]))+(q_ref[2]*@1[3]))-(q_ref[3]*@1[2])), @8=((((q_ref[0]*@1[2])-(q_ref[1]*@1[3]))+(q_ref[2]*@1[0]))+(q_ref[3]*@1[1])), @9=(vertcat(a[0], (-a[1]), (-a[2]), (-a[3]))/dot(a, a)), @10=((((q_ref[0]*@9[0])-(q_ref[1]*@9[1]))-(q_ref[2]*@9[2]))-(q_ref[3]*@9[3])), @11=((((q_ref[0]*@9[3])+(q_ref[1]*@9[2]))-(q_ref[2]*@9[1]))+(q_ref[3]*@9[0])), @12=vertcat(@10, 0, 0, @11), @13=(@12/||@12||_F), @14=(vertcat(@13[0], (-@13[1]), (-@13[2]), (-@13[3]))/dot(@13, @13)), @15=((((q_ref[0]*@9[1])+(q_ref[1]*@9[0]))+(q_ref[2]*@9[3]))-(q_ref[3]*@9[2])), @16=((((q_ref[0]*@9[2])-(q_ref[1]*@9[3]))+(q_ref[2]*@9[0]))+(q_ref[3]*@9[1])), mac(mac(vertcat((p-p_ref), (sq(((((@2*@6[1])+(@7*@6[0]))+(@8*@6[3]))-(@3*@6[2])))+sq(((((@2*@6[2])-(@7*@6[3]))+(@8*@6[0]))+(@3*@6[1])))), @5[3], (v-v_ref), (r-r_ref))',\n[[40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5]],zeros(1x11)),vertcat((p-p_ref), (sq(((((@10*@14[1])+(@15*@14[0]))+(@16*@14[3]))-(@11*@14[2])))+sq(((((@10*@14[2])-(@15*@14[3]))+(@16*@14[0]))+(@11*@14[1])))), @13[3], (v-v_ref), (r-r_ref)),0)",
        "cost_psi_expr": [],
        "cost_psi_expr_0": [],
        "cost_psi_expr_e": [],
        "cost_r_in_psi_expr": [],
        "cost_r_in_psi_expr_0": [],
        "cost_r_in_psi_expr_e": [],
        "cost_y_expr": [],
        "cost_y_expr_0": [],
        "cost_y_expr_e": [],
        "disc_dyn_expr": [],
        "dyn_disc_fun": null,
        "dyn_disc_fun_jac": null,
        "dyn_disc_fun_jac_hess": null,
        "dyn_ext_fun_type": "casadi",
        "dyn_generic_source": null,
        "dyn_impl_dae_fun": null,
        "dyn_impl_dae_fun_jac": null,
        "dyn_impl_dae_jac": null,
        "f_expl_expr": "@1=a[2], @2=a[3], @3=a[1], @4=a[0], @5=vertcat(u1, u2, u3, u4), @6=(8.54858*@5), @7=(8.54858*@5), vertcat(v, (0.5*mac(horzcat(horzcat(0, (-r[0]), (-r[1]), (-r[2]))', horzcat(r[0], 0, r[2], (-r[1]))', horzcat(r[1], (-r[2]), 0, r[0])', horzcat(r[2], r[1], (-r[0]), 0)')',a,zeros(4x1))), (mac(horzcat(horzcat((1-(2.*(sq(@1)+sq(@2)))), (2.*((@3*@1)-(@4*@2))), (2.*((@3*@2)+(@4*@1))))', horzcat((2.*((@3*@1)+(@4*@2))), (1-(2.*(sq(@3)+sq(@2)))), (2.*((@1*@2)-(@4*@3))))', horzcat((2.*((@3*@2)-(@4*@1))), (2.*((@1*@2)+(@4*@3))), (1-(2.*(sq(@3)+sq(@1)))))')',(vertcat(0, 0, (((@6[0]+@6[1])+@6[2])+@6[3]))/2.064),zeros(3x1))-[0, 0, 9.81]), ((mac(@7',[-0.173948, -0.173948, 0.173948, 0.173948],0)+((-0.0184715*r[1])*r[2]))/0.0236152), ((((0.0185744*r[2])*r[0])-mac(@7',[0.173948, -0.173948, -0.173948, 0.173948],0))/0.0237181), ((mac(@7',[-0.016, 0.016, -0.016, 0.016],0)+((-0.000102925*r[0])*r[1]))/0.0421896))",
        "f_impl_expr": [],
        "gnsf_nontrivial_f_LO": 1,
        "gnsf_purely_linear": 0,
        "name": "quad",
        "nu_original": null,
        "p": "vertcat(p_ref, q_ref, v_ref, r_ref, u_ref)",
        "p_global": "0x1",
        "t": [],
        "t0": null,
        "t_label": "t",
        "u": "vertcat(u1, u2, u3, u4)",
        "u_labels": null,
        "x": "vertcat(p, a, v, r)",
        "x_labels": null,
        "xdot": "x_dot",
        "z": "0x1"
    },
    "name": "quad",
    "p_global_values": [],
    "parameter_values": [
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ],
    "problem_class": "OCP",
    "shared_lib_ext": ".so",
    "simulink_opts": null,
    "solver_options": {
        "N_horizon": 100,
        "Tsim": 0.020000000000000014,
        "adaptive_levenberg_marquardt_lam": 5.0,
        "adaptive_levenberg_marquardt_mu0": 0.001,
        "adaptive_levenberg_marquardt_mu_min": 1e-16,
        "as_rti_iter": 1,
        "as_rti_level": 4,
        "collocation_type": "GAUSS_LEGENDRE",
        "cost_discretization": "EULER",
        "cost_scaling": [
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            0.02,
            1.0
        ],
        "custom_templates": [],
        "custom_update_copy": true,
        "custom_update_filename": "",
        "custom_update_header_filename": "",
        "eval_residual_at_max_iter": false,
        "exact_hess_constr": 1,
        "exact_hess_cost": 1,
        "exact_hess_dyn": 1,
        "ext_cost_num_hess": 0,
        "ext_fun_compile_flags": "-O2",
        "fixed_hess": 0,
        "globalization": "FIXED_STEP",
        "globalization_alpha_min": 0.05,
        "globalization_alpha_reduction": 0.7,
        "globalization_eps_sufficient_descent": 0.0001,
        "globalization_fixed_step_length": 1.0,
        "globalization_full_step_dual": 0,
        "globalization_funnel_fraction_switching_condition": 0.001,
        "globalization_funnel_init_increase_factor": 15.0,
        "globalization_funnel_init_upper_bound": 1.0,
        "globalization_funnel_initial_penalty_parameter": 1.0,
        "globalization_funnel_kappa": 0.9,
        "globalization_funnel_sufficient_decrease_factor": 0.9,
        "globalization_line_search_use_sufficient_descent": 0,
        "globalization_use_SOC": 0,
        "hessian_approx": "GAUSS_NEWTON",
        "hpipm_mode": "BALANCE",
        "integrator_type": "ERK",
        "levenberg_marquardt": 0.0,
        "log_primal_step_norm": false,
        "model_external_shared_lib_dir": null,
        "model_external_shared_lib_name": null,
        "nlp_solver_ext_qp_res": 0,
        "nlp_solver_max_iter": 100,
        "nlp_solver_tol_comp": 1e-06,
        "nlp_solver_tol_eq": 1e-06,
        "nlp_solver_tol_ineq": 1e-06,
        "nlp_solver_tol_min_step_norm": 0.0,
        "nlp_solver_tol_stat": 1e-06,
        "nlp_solver_type": "SQP_RTI",
        "nlp_solver_warm_start_first_qp": false,
        "nlp_tol": 0.01,
        "nlp_tol_eq": 0.01,
        "nlp_tol_ineq": 0.01,
        "num_threads_in_batch_solve": 1,
        "print_level": 0,
        "qp_solver": "PARTIAL_CONDENSING_HPIPM",
        "qp_solver_cond_N": 100,
        "qp_solver_cond_block_size": null,
        "qp_solver_cond_ric_alg": 1,
        "qp_solver_iter_max": 50,
        "qp_solver_mu0": 0.0,
        "qp_solver_ric_alg": 1,
        "qp_solver_tol_comp": 0.01,
        "qp_solver_tol_eq": 0.01,
        "qp_solver_tol_ineq": 0.01,
        "qp_solver_tol_stat": 0.01,
        "qp_solver_warm_start": 0,
        "reg_epsilon": 0.0001,
        "regularize_method": "NO_REGULARIZE",
        "rti_log_only_available_residuals": 0,
        "rti_log_residuals": 0,
        "shooting_nodes": [
            0.0,
            0.02,
            0.04,
            0.06,
            0.08,
            0.1,
            0.12000000000000001,
            0.14,
            0.16,
            0.18,
            0.19999999999999998,
            0.21999999999999997,
            0.23999999999999996,
            0.25999999999999995,
            0.27999999999999997,
            0.3,
            0.32,
            0.34,
            0.36000000000000004,
            0.38000000000000006,
            0.4000000000000001,
            0.4200000000000001,
            0.4400000000000001,
            0.46000000000000013,
            0.48000000000000015,
            0.5000000000000001,
            0.5200000000000001,
            0.5400000000000001,
            0.5600000000000002,
            0.5800000000000002,
            0.6000000000000002,
            0.6200000000000002,
            0.6400000000000002,
            0.6600000000000003,
            0.6800000000000003,
            0.7000000000000003,
            0.7200000000000003,
            0.7400000000000003,
            0.7600000000000003,
            0.7800000000000004,
            0.8000000000000004,
            0.8200000000000004,
            0.8400000000000004,
            0.8600000000000004,
            0.8800000000000004,
            0.9000000000000005,
            0.9200000000000005,
            0.9400000000000005,
            0.9600000000000005,
            0.9800000000000005,
            1.0000000000000004,
            1.0200000000000005,
            1.0400000000000005,
            1.0600000000000005,
            1.0800000000000005,
            1.1000000000000005,
            1.1200000000000006,
            1.1400000000000006,
            1.1600000000000006,
            1.1800000000000006,
            1.2000000000000006,
            1.2200000000000006,
            1.2400000000000007,
            1.2600000000000007,
            1.2800000000000007,
            1.3000000000000007,
            1.3200000000000007,
            1.3400000000000007,
            1.3600000000000008,
            1.3800000000000008,
            1.4000000000000008,
            1.4200000000000008,
            1.4400000000000008,
            1.4600000000000009,
            1.4800000000000009,
            1.5000000000000009,
            1.520000000000001,
            1.540000000000001,
            1.560000000000001,
            1.580000000000001,
            1.600000000000001,
            1.620000000000001,
            1.640000000000001,
            1.660000000000001,
            1.680000000000001,
            1.700000000000001,
            1.720000000000001,
            1.740000000000001,
            1.7600000000000011,
            1.7800000000000011,
            1.8000000000000012,
            1.8200000000000012,
            1.8400000000000012,
            1.8600000000000012,
            1.8800000000000012,
            1.9000000000000012,
            1.9200000000000013,
            1.9400000000000013,
            1.9600000000000013,
            1.9800000000000013,
            2.0000000000000013
        ],
        "sim_method_jac_reuse": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "sim_method_newton_iter": 3,
        "sim_method_newton_tol": 0.0,
        "sim_method_num_stages": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "sim_method_num_steps": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ],
        "store_iterates": false,
        "tf": 2.0,
        "time_steps": [
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014,
            0.020000000000000014
        ],
        "timeout_heuristic": "LAST",
        "timeout_max_time": 0.0,
        "with_adaptive_levenberg_marquardt": false,
        "with_solution_sens_wrt_params": false,
        "with_value_sens_wrt_params": false
    },
    "zoro_description": null
}